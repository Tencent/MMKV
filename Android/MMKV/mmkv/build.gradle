plugins {
    id 'com.android.library'
    id 'maven-publish'
    id 'signing'
//    id 'org.jetbrains.dokka' version '1.4.32' // For Kotlin projects
}
apply from: rootProject.file('gradle/build_library.gradle')

android {
    namespace "com.tencent.mmkv"
    publishing {
        multipleVariants("DefaultCppRelease") {
            includeBuildTypeValues('release')
            includeFlavorDimensionAndValues('stl_mode', 'DefaultCpp')
            withJavadocJar()
        }
        multipleVariants("StaticCppRelease") {
            includeBuildTypeValues('release')
            includeFlavorDimensionAndValues('stl_mode', 'StaticCpp')
            withJavadocJar()
        }
        multipleVariants("SharedCppRelease") {
            includeBuildTypeValues('release')
            includeFlavorDimensionAndValues('stl_mode', 'SharedCpp')
            withJavadocJar()
        }
    }

    defaultConfig {
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                // uncomment this line to support 32-bit ABIs (armeabi-v7a & x86)
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
//                abiFilters 'arm64-v8a', 'x86_64'
            }
        }
        ndkVersion = '26.3.11579264'
        minSdkVersion rootProject.ext.minSdkVersion
    }
    buildTypes {
        release {
            minifyEnabled false
            externalNativeBuild {
                cmake {
                    cppFlags "-fvisibility=hidden", "-funwind-tables", "-fasynchronous-unwind-tables", "-O2",
                            "-Wl,-z,max-page-size=16384"
                }
            }
            consumerProguardFiles 'proguard-rules.pro'
//            debuggable true
//            jniDebuggable true
        }
        debug {
            jniDebuggable true
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
            version "3.18.0+"
        }
    }
    packagingOptions {
        jniLibs {
            useLegacyPackaging true
        }
    }
    flavorDimensions = ["stl_mode"]
    productFlavors {
        DefaultCpp {
            dimension "stl_mode"
            ext.artifactIdSuffix = ''
            externalNativeBuild {
                cmake {
                    arguments = ["-DANDROID_STL=c++_static"]
                    cppFlags "-DMMKV_STL_SHARED=0"
                }
            }
        }
        StaticCpp {
            dimension "stl_mode"
            ext.artifactIdSuffix = 'static'
            externalNativeBuild {
                cmake {
                    arguments = ["-DANDROID_STL=c++_static"]
                    cppFlags "-DMMKV_STL_SHARED=0"
                }
            }
            // not working
//            packagingOptions {
//                exclude "prefab/modules/**"
//            }
        }
        SharedCpp {
            dimension "stl_mode"
            ext.artifactIdSuffix = 'shared'
            externalNativeBuild {
                cmake {
                    arguments = ["-DANDROID_STL=c++_shared"]
                    cppFlags "-DMMKV_STL_SHARED=1"
                }
            }
        }
    }
    buildFeatures {
        prefab true
        prefabPublishing true
        aidl true
    }
    prefab {
        mmkv {
            headers "../../../Core/include"
        }
    }
}

def readPropertyFromLocalProperties(String key) {
    Properties properties = new Properties()
    try {
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
    } catch (Exception e) {
        println("load local properties failed msg:${e.message}")
    }
    return properties.getProperty(key)
}

def getRepositoryUsername() {
    return hasProperty('REPOSITORY_USERNAME') ? REPOSITORY_USERNAME : readPropertyFromLocalProperties('REPOSITORY_USERNAME')
}

def getRepositoryPassword() {
    return hasProperty('REPOSITORY_PASSWORD') ? REPOSITORY_PASSWORD : readPropertyFromLocalProperties('REPOSITORY_PASSWORD')
}

afterEvaluate {
    android.libraryVariants.all { variant ->
        if (variant.buildType.name == "release") {
            def abiFilters = ['arm64-v8a', 'x86_64', 'armeabi-v7a', 'x86']

            def strippedLibsDir = "$buildDir/intermediates/stripped_native_libs/${variant.name}/strip${variant.name}DebugSymbols/out/lib"
            // Create per-variant copy task
            tasks.register("syncStrippedLibsToPrefab${variant.name.capitalize()}", Copy) {
                from(strippedLibsDir) {
                    include "**/libmmkv.so"
                }
                into "$buildDir/intermediates/prefab_package/${variant.name.capitalize()}/prefab/modules/mmkv/libs"
                eachFile {
                    println('hhh before:' + path)
                    for (abi in abiFilters) {
                        if (path.contains("${abi}/")) {
                            path = path.replace("${abi}/", "android.${abi}/")
                            break
                        }
                    }
                    println('hhh after:' + path)
                }

                // Hook into build process
                dependsOn("strip${variant.name.capitalize()}DebugSymbols")
            }

            // Hook into build process
            tasks.named("externalNativeBuild${variant.name.capitalize()}") {
                finalizedBy("syncStrippedLibsToPrefab${variant.name.capitalize()}")
            }
            tasks.named("bundle${variant.name.capitalize()}Aar") {
                dependsOn("syncStrippedLibsToPrefab${variant.name.capitalize()}")
            }

            // Generate combined artifact suffix from all flavor dimensions
            def flavorSuffixes = variant.productFlavors.collect { it.ext.artifactIdSuffix }
            def artifactIdSuffix = flavorSuffixes.join("-")
            def fullArtifactId = "${POM_ARTIFACT_ID}${artifactIdSuffix ? "-$artifactIdSuffix" : ""}"

            // Create debug symbols task per variant
            def symbolsTask = tasks.register("bundleSymbols${variant.name.capitalize()}", Jar) {
                from file("build/intermediates/cmake/${variant.name}/obj/")
                archiveClassifier.set("so-symbols")
                destinationDirectory.set(file("$buildDir/intermediates/so-symbols/${variant.name}"))
                dependsOn('build')
            }
            def sourcesJar = tasks.register("${name}SourcesJar", Jar) {
                dependsOn("build")
                archiveClassifier.set("sources")
                destinationDirectory.set(file("$buildDir/intermediates/sources/${variant.name}"))
                from(sourceSets.java.srcDirs)
            }

            // Create publication per variant
            publishing.publications.create(variant.name, MavenPublication) {
                from components.findByName(variant.name)

                groupId = group
                artifactId = fullArtifactId
                version = version

                // Add debug symbols
                artifact symbolsTask
                artifact sourcesJar

                // Configure POM
                pom {
                    name = 'MMKV'
                    description = POM_DESCRIPTION
                    url = POM_URL
                    licenses {
                        license {
                            name = POM_LICENCE_NAME
                            url = POM_LICENCE_URL
                        }
                    }

                    developers {
                        developer {
                            id = POM_DEVELOPER_ID
                            name = POM_DEVELOPER_NAME
                        }
                    }

                    scm {
                        url = POM_SCM_URL
                        connection = POM_SCM_CONNECTION
                        developerConnection = POM_SCM_DEV_CONNECTION
                    }
                }
            }
        }
    }

    // Configure repositories and signing
    publishing.repositories {
        maven {
            name = "MavenCentral"
            url = RELEASE_REPOSITORY_URL
            credentials {
                username = getRepositoryUsername()
                password = getRepositoryPassword()
            }
        }
    }

//    signing {
//        sign publishing.publications
//    }
}

configurations {
    javadocDeps
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.annotation:annotation:1.9.1'
    javadocDeps 'androidx.annotation:annotation:1.9.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.6.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'

    compileOnly project(':mmkvannotation')
}
